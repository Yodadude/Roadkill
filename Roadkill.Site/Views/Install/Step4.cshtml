@model SettingsSummary
@{
	Layout = "~/Views/Install/Layout.cshtml";
}
<script type="text/javascript">
	$(document).ready(function ()
	{
		setPage(4);
		$("form").validationEngine();

		$("#testattachments").click(function()
		{	
			hideAlerts();

			$.get("@(Url.Action("TestAttachments"))",
					{ "folder" : $("#AttachmentsFolder").val() },
					function(data)
					{
						if (data.Success)
						{
							showSuccess("#attachmentssuccess");
						}
						else
						{
							showFailure("#attachmentsfailure",data.ErrorMessage);
						}
					});
		});

		$("form").submit(function ()
		{
			$("#wait").modal({ close: false });
		});
	});
</script>

<p>Almost done...Finally some extra tweakable settings. </p>

@using (Html.BeginForm("Step5", "Install"))
{
	@(Html.HiddenFor<SettingsSummary, string>(h => h.AdminEmail))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.AdminPassword))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.AdminRoleName))
	@(Html.HiddenFor<SettingsSummary, bool>(h => h.AllowUserSignup))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.ConnectionString))
	@(Html.HiddenFor<SettingsSummary, DatabaseType>(h => h.DatabaseType))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.EditorRoleName))
	@(Html.HiddenFor<SettingsSummary, bool>(h => h.EnableRecaptcha))	
	@(Html.HiddenFor<SettingsSummary, string>(h => h.LdapConnectionString))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.LdapUsername))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.LdapPassword))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.RecaptchaPrivateKey))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.RecaptchaPublicKey))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.SiteName))
	@(Html.HiddenFor<SettingsSummary, string>(h => h.SiteUrl))
	@(Html.HiddenFor<SettingsSummary, bool>(h => h.UseWindowsAuth))
	
	<fieldset>
		<legend>Attachments folder</legend>
		<label>
			This is the directory where all files are uploaded to. This directory will need write permission by the user that 
			the app pool runs under. Most of the time you shouldn't have to worry about changing the permissions for the folder, 
			as they will be inherited from the parent folder.
			<br /><br />
			Make sure the folder path begins with "~/" for the website root. You should check the folder can be accessed by the browser as 
			well as the being writeable to, as folders such as App_Data and bin can be written to but will not show any images stored there.
		</label>

		<div class="small">
			<div class="textbox">@(Html.TextBoxFor<SettingsSummary, string>(s => s.AttachmentsFolder, new { @class = "validate[required]" }))</div>
			<input id="testattachments" class="button" type="button" value="Test" />
			<div id="attachmentssuccess" class="success alert hidden">
				<h2>Success!</h2>
				<p>The folder exists and can be written to.</p>
			</div>

			<div id="attachmentsfailure" class="failure alert hidden">
				<h2>Failure!</h2>
				<p>Unable to write to the folder: <span class="errormessage"></span></p>
			</div>
		</div>	
	</fieldset>
	
	<fieldset>
		<legend>Allowed extensions</legend>
		<label>These are the file extensions that can be uploaded.</label>

		<div class="textbox">@(Html.TextBoxFor<SettingsSummary, string>(s => s.AllowedExtensions, new { @class = "validate[required]" }))</div>
	</fieldset>
	
	<fieldset>
		<legend>Theme</legend>
		<label>This is the theme that the site uses. This should match a folder name in the Themes directory.</label>

		<div class="textbox">@(Html.TextBoxFor<SettingsSummary, string>(s => s.Theme, new { @class = "validate[required]" }))</div>
	</fieldset>
	
	<fieldset>
		<legend>Markup type</legend>
		<label>
		This is the markup format that is used. Roadkill currently supports the following values: Creole, Markdown, Mediawiki.<br /><br />
		Creole is the recommended format.		
		</label>

		<div class="textbox">@(Html.TextBoxFor<SettingsSummary, string>(s => s.MarkupType, new { @class = "validate[required]" }))</div>
	</fieldset>
	
	<fieldset>
		<legend>Cache</legend>
		<label>
		Roadkill uses NHibernate caching along with ASP.NET's output caching. It's recommended that you enable caching to increase 
		the responsiveness of the site. Database caching is not currently supported for for web gardens or web farms.
		<br /><br />
		This setting only affects database caching, you will need to manually disable output caching in the web.config.
		</label>
		<br />

		<div>
			<div class="left">
				@(Html.CheckBoxFor<SettingsSummary>(s => s.CacheEnabled))
				Enable cache
			</div>
		</div>
		<br class="clear" />

		<div>
			<div class="left">
				@(Html.CheckBoxFor<SettingsSummary>(s => s.CacheText))		
				Cache text content
			</div>
			<br /> <br /> 
			<span class="italic">Unchecking "Cache text content" will mean each page's textual content is loaded from the database.</span>
		</div>
	</fieldset>

	<div>
		<div class="previous"><a href="javascript:history.go(-1)">&lt; Back</a></div>
	
		<div class="continue">
			<input type="submit" class="button" value="Next" />
		</div>
	</div>
}

<div id="wait" class="hidden" style="background-color:#333;width:100px;text-align:center;">
	<img src="@(Url.Content("~/Assets/images/loadinglarge.gif"))" border="0" alt="loading" />
</div>